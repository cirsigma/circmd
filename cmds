-- Command System Setup
local prefix = "!" -- Default prefix
local commands = {}

-- Add command with aliases
local function addCommand(aliases, func)
    for _, alias in ipairs(aliases) do
        commands[alias] = func
    end
end

-- Execute command
local function executeCommand(input)
    local args = input:split(" ")
    local commandName = args[1]
    table.remove(args, 1)

    if commands[commandName] then
        commands[commandName](args)
    else
        print("Unknown command: " .. commandName)
    end
end

-- Chat Input Handling
game:GetService("Players").LocalPlayer.Chatted:Connect(function(msg)
    if msg:sub(1, #prefix) == prefix then
        local input = msg:sub(#prefix + 1)
        executeCommand(input)
    end
end)

-- Add commands
addCommand({"speed"}, function(args)
    local speed = tonumber(args[1])
    if speed then
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
        print("Set WalkSpeed to " .. speed)
    else
        print("Invalid speed value.")
    end
end)

addCommand({"loopspeed", "lspeed"}, function(args)
    local speed = tonumber(args[1])
    if speed then
        while true do
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = speed
            task.wait(0.1)
        end
    else
        print("Invalid speed value.")
    end
end)

addCommand({"jumppower", "jp"}, function(args)
    local power = tonumber(args[1])
    if power then
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = power
        print("Set JumpPower to " .. power)
    else
        print("Invalid power value.")
    end
end)

addCommand({"loopjumppower", "ljp", "loopjp"}, function(args)
    local power = tonumber(args[1])
    if power then
        while true do
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = power
            task.wait(0.1)
        end
    else
        print("Invalid power value.")
    end
end)

-- UI Command Bar
local screenGui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
local cmdBar = Instance.new("TextBox", screenGui)
cmdBar.Size = UDim2.new(0, 300, 0, 40)
cmdBar.Position = UDim2.new(0.5, -150, 1, -50)
cmdBar.AnchorPoint = Vector2.new(0.5, 1)
cmdBar.PlaceholderText = "Enter command..."
cmdBar.Text = ""
cmdBar.Visible = true

local cmdList = Instance.new("ScrollingFrame", screenGui)
cmdList.Size = UDim2.new(0, 300, 0, 200)
cmdList.Position = UDim2.new(0.5, -150, 1, -100)
cmdList.AnchorPoint = Vector2.new(0.5, 1)
cmdList.Visible = false

local function refreshCmdList(filter)
    cmdList:ClearAllChildren()
    local yPos = 0

    for alias, _ in pairs(commands) do
        if not filter or alias:sub(1, #filter) == filter then
            local cmdLabel = Instance.new("TextLabel", cmdList)
            cmdLabel.Size = UDim2.new(1, 0, 0, 25)
            cmdLabel.Position = UDim2.new(0, 0, 0, yPos)
            cmdLabel.Text = alias
            cmdLabel.TextSize = 14
            cmdLabel.BackgroundTransparency = 1
            yPos += 25
        end
    end
end

cmdBar.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local input = cmdBar.Text
        cmdBar.Text = ""
        executeCommand(input)
    end
end)

cmdBar:GetPropertyChangedSignal("Text"):Connect(function()
    local filter = cmdBar.Text
    if filter == "" then
        cmdList.Visible = false
    else
        cmdList.Visible = true
        refreshCmdList(filter)
    end
end)

-- Initialize
refreshCmdList()
cmdList.Visible = true
